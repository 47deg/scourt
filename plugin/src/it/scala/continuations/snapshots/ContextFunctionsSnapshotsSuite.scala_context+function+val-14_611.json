["PackageDef(Ident(<empty>),List(Import(Ident(continuations),List(ImportSelector(Ident(_),EmptyTree,EmptyTree))), ValDef(compileFromString$package,Ident(compileFromString$package$),Apply(Select(New(Ident(compileFromString$package$)),<init>),List())), TypeDef(compileFromString$package$,Template(DefDef(<init>,List(List()),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)],EmptyTree),List(Apply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class Object)]),<init>),List())),ValDef(_,SingletonTypeTree(Ident(compileFromString$package)),EmptyTree),List(DefDef(writeReplace,List(List()),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),type AnyRef)],Apply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class runtime)),class ModuleSerializationProxy)]),<init>),List(Literal(Constant(TermRef(ThisType(TypeRef(NoPrefix,module class <empty>)),object compileFromString$package)))))), DefDef(program,List(),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)],Block(List(DefDef(foo,List(List(ValDef(completion,TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),trait Continuation),List(RefinedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait PolyFunction),apply,PolyType(List(A), List(TypeBounds(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Nothing),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any))), MethodType(List(x$1), List(AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class immutable)),class List),List(TypeParamRef(A)))), TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int))))))],EmptyTree))),TypeTree[RefinedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait PolyFunction),apply,PolyType(List(A), List(TypeBounds(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Nothing),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any))), MethodType(List(x$1), List(AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class immutable)),class List),List(TypeParamRef(A)))), OrType(OrType(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Null)),TermRef(ThisType(TypeRef(ThisType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),module class Continuation$)),module class State$)),val Suspended)))))],Block(List(TypeDef($anon,Template(DefDef(<init>,List(List()),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)],EmptyTree),List(Apply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class Object)]),<init>),List()), TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait PolyFunction)]),ValDef(_,EmptyTree,EmptyTree),List(DefDef(apply,List(List(TypeDef(A,TypeBoundsTree(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Nothing)],TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any)],EmptyTree))), List(ValDef(l,AppliedTypeTree(Ident(List),List(Ident(A))),EmptyTree))),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int)],Select(Ident(l),size)))))),Typed(Apply(Select(New(Ident($anon)),<init>),List()),TypeTree[RefinedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait PolyFunction),apply,PolyType(List(A), List(TypeBounds(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Nothing),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any))), MethodType(List(l), List(AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class immutable)),class List),List(TypeParamRef(A)))), TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int))))])))),Apply(Ident(println),List(Apply(TypeApply(Select(Apply(Select(Ident(foo),apply),List(Ident(given_Suspend))),apply),List(TypeTree[TypeVar(TypeParamRef(A) -> TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class String))])),List(Apply(TypeApply(Select(Ident(List),apply),List(TypeTree[TypeVar(TypeParamRef(A) -> TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class String))])),List(Typed(SeqLiteral(List(Literal(Constant(AA)), Literal(Constant(AA))),TypeTree[TypeVar(TypeParamRef(A) -> TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class String))]),TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class <repeated>),List(TypeVar(TypeParamRef(A) -> TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class String))))]))))))))))))))","package <empty> {\n  import continuations.*\n  final lazy module val compileFromString$package: \n    compileFromString$package\n   = new compileFromString$package()\n  @SourceFile(\"compileFromString.scala\") final module class \n    compileFromString$package\n  () extends Object() { this: compileFromString$package.type =>\n    private def writeReplace(): AnyRef = \n      new scala.runtime.ModuleSerializationProxy(classOf[compileFromString$package.type])\n    def program: Unit = \n      {\n        def foo(completion: continuations.Continuation[[A] => (List[A]) => Int]): \n          [A] => (List[A]) => Int | Null | continuations.Continuation.State.Suspended.type\n         = \n          {\n            final class $anon() extends Object(), PolyFunction {\n              def apply[A >: Nothing <: Any](l: List[A]): Int = l.size\n            }\n            new $anon():([A] => (List[A]) => Int)\n          }\n        println(foo.apply(continuations.Suspend.given_Suspend).apply[String](List.apply[String]([\"AA\",\"AA\" : String]*)))\n      }\n  }\n}"]