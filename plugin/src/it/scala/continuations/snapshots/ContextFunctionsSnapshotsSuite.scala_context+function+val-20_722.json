["PackageDef(Ident(<empty>),List(Import(Ident(continuations),List(ImportSelector(Ident(_),EmptyTree,EmptyTree))), ValDef(compileFromString$package,Ident(compileFromString$package$),Apply(Select(New(Ident(compileFromString$package$)),<init>),List())), TypeDef(compileFromString$package$,Template(DefDef(<init>,List(List()),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)],EmptyTree),List(Apply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class Object)]),<init>),List())),ValDef(_,SingletonTypeTree(Ident(compileFromString$package)),EmptyTree),List(DefDef(writeReplace,List(List()),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),type AnyRef)],Apply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class runtime)),class ModuleSerializationProxy)]),<init>),List(Literal(Constant(TermRef(ThisType(TypeRef(NoPrefix,module class <empty>)),object compileFromString$package)))))), DefDef(program,List(),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)],Block(List(DefDef(foo,List(List(ValDef(completion,TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),trait Continuation),List(OrType(AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait Function1),List(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int), AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait ContextFunction1),List(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int), TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int))))),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any))))],EmptyTree))),TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait Function1),List(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int), AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait ContextFunction1),List(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int), TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any)))))],Block(List(DefDef($anonfun,List(List(ValDef(y,TypeTree[TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int)],EmptyTree))),TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait ContextFunction1),List(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int), TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any)))],Block(List(DefDef($anonfun,List(List(ValDef(evidence$2,TypeTree[TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int)],EmptyTree))),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any)],Block(List(ValDef(x,TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int)],Literal(Constant(3))), Apply(Ident(println),List(Literal(Constant(Hello))))),Apply(Select(Apply(Select(Apply(Select(Literal(Constant(1)),+),List(Ident(x))),+),List(Ident(y))),+),List(Inlined(Ident(Predef$),List(),Inlined(EmptyTree,List(),Ident(evidence$2)))))))),Closure(List(),Ident($anonfun),EmptyTree)))),Closure(List(),Ident($anonfun),EmptyTree))), ValDef(given_Int,Ident(Int),Literal(Constant(3)))),Apply(Ident(println),List(Apply(Select(Apply(Select(Apply(Select(Ident(foo),apply),List(Ident(given_Suspend))),apply),List(Literal(Constant(1)))),apply),List(Ident(given_Int))))))))))))","package <empty> {\n  import continuations.*\n  final lazy module val compileFromString$package:\n    compileFromString$package = new compileFromString$package()\n  @SourceFile(\"compileFromString.scala\") final module class\n    compileFromString$package() extends Object() {\n    this: compileFromString$package.type =>\n    private def writeReplace(): AnyRef =\n      new scala.runtime.ModuleSerializationProxy(classOf[compileFromString$package.type])\n    def program: Unit =\n      {\n        def foo(completion: continuations.Continuation[(Int => (Int) ?=> Int) | Any]): Int => (Int) ?=> Any =\n          {\n            def $anonfun(y: Int): (Int) ?=> Any =\n              {\n                def $anonfun(using evidence$2: Int): Any =\n                  {\n                    val x: Int = 3\n                    println(\"Hello\")\n                    1.+(x).+(y).+(evidence$2)\n                  }\n                closure($anonfun)\n              }\n            closure($anonfun)\n          }\n        final lazy given val given_Int: Int = 3\n        println(foo.apply(continuations.Suspend.given_Suspend).apply(1).apply(given_Int))\n      }\n  }\n}"]
