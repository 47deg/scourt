["PackageDef(Ident(<empty>),List(Import(Ident(continuations),List(ImportSelector(Ident(_),EmptyTree,EmptyTree))), ValDef(compileFromString$package,Ident(compileFromString$package$),Apply(Select(New(Ident(compileFromString$package$)),<init>),List())), TypeDef(compileFromString$package$,Template(DefDef(<init>,List(List()),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)],EmptyTree),List(Apply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class Object)]),<init>),List())),ValDef(_,SingletonTypeTree(Ident(compileFromString$package)),EmptyTree),List(DefDef(writeReplace,List(List()),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),type AnyRef)],Apply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class runtime)),class ModuleSerializationProxy)]),<init>),List(Literal(Constant(TermRef(ThisType(TypeRef(NoPrefix,module class <empty>)),object compileFromString$package)))))), DefDef(program,List(),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)],Block(List(DefDef(foo,List(List(ValDef(completion,TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),trait Continuation),List(OrType(AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait ContextFunction1),List(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int), AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait ContextFunction1),List(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class scala)),object Predef),type String), AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait Function1),List(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int), TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int))))))),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any))))],EmptyTree))),TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait ContextFunction1),List(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int), AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait ContextFunction1),List(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class scala)),object Predef),type String), AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait Function1),List(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int), TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any)))))))],Block(List(DefDef($anonfun,List(List(ValDef(evidence$1,TypeTree[TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int)],EmptyTree))),TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait ContextFunction1),List(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class scala)),object Predef),type String), AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait Function1),List(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int), TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any)))))],Block(List(DefDef($anonfun,List(List(ValDef(evidence$3,TypeTree[TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class scala)),object Predef),type String)],EmptyTree))),TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait Function1),List(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int), TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any)))],Block(List(DefDef($anonfun,List(List(ValDef(x,TypeTree[TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int)],EmptyTree))),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any)],Apply(Select(Apply(Select(Ident(x),+),List(Inlined(Ident(Predef$),List(),Inlined(EmptyTree,List(),Ident(evidence$1))))),+),List(Apply(Select(Inlined(Ident(Predef$),List(),Inlined(EmptyTree,List(),Ident(evidence$3))),length),List()))))),Closure(List(),Ident($anonfun),EmptyTree)))),Closure(List(),Ident($anonfun),EmptyTree)))),Closure(List(),Ident($anonfun),EmptyTree))), ValDef(given_Int,Ident(Int),Literal(Constant(3))), ValDef(given_String,Ident(String),Literal(Constant(AA)))),Apply(Ident(println),List(Apply(Select(Apply(Select(Apply(Select(Ident(foo),apply),List(Ident(given_Int), Ident(given_Suspend))),apply),List(Ident(given_String))),apply),List(Literal(Constant(1)))))))))))))","package <empty> {\n  import continuations.*\n  final lazy module val compileFromString$package:\n    compileFromString$package = new compileFromString$package()\n  @SourceFile(\"compileFromString.scala\") final module class\n    compileFromString$package() extends Object() {\n    this: compileFromString$package.type =>\n    private def writeReplace(): AnyRef =\n      new scala.runtime.ModuleSerializationProxy(classOf[compileFromString$package.type])\n    def program: Unit =\n      {\n        @ContextResultCount(2) def foo(completion: continuations.Continuation[((Int) ?=> (String) ?=> Int => Int) | Any]):\n          (Int) ?=> (String) ?=> Int => Any =\n          {\n            def $anonfun(using evidence$1: Int): (String) ?=> Int => Any =\n              {\n                def $anonfun(using evidence$3: String): Int => Any =\n                  {\n                    def $anonfun(x: Int): Any = x.+(evidence$1).+(evidence$3.length())\n                    closure($anonfun)\n                  }\n                closure($anonfun)\n              }\n            closure($anonfun)\n          }\n        final lazy given val given_Int: Int = 3\n        final lazy given val given_String: String = \"AA\"\n        println(foo.apply(given_Int, continuations.Suspend.given_Suspend).apply(given_String).apply(1))\n      }\n  }\n}"]
