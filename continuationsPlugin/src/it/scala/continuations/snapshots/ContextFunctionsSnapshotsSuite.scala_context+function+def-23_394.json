["PackageDef(Ident(<empty>),List(Import(Ident(continuations),List(ImportSelector(Ident(_),EmptyTree,EmptyTree))), ValDef(compileFromString$package,Ident(compileFromString$package$),Apply(Select(New(Ident(compileFromString$package$)),<init>),List())), TypeDef(compileFromString$package$,Template(DefDef(<init>,List(List()),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)],EmptyTree),List(Apply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class Object)]),<init>),List())),ValDef(_,SingletonTypeTree(Ident(compileFromString$package)),EmptyTree),List(DefDef(writeReplace,List(List()),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),type AnyRef)],Apply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class runtime)),class ModuleSerializationProxy)]),<init>),List(Literal(Constant(TermRef(ThisType(TypeRef(NoPrefix,module class <empty>)),object compileFromString$package)))))), DefDef(program,List(),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)],Block(List(DefDef(foo,List(List(ValDef(completion,TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),trait Continuation),List(OrType(RefinedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait PolyFunction),apply,PolyType(List(A), List(TypeBounds(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Nothing),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any))), MethodType(List(x$1), List(AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class immutable)),class List),List(TypeParamRef(A)))), RefinedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait PolyFunction),apply,PolyType(List(B), List(TypeBounds(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Nothing),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any))), MethodType(List(x$1), List(AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class immutable)),class List),List(TypeParamRef(B)))), AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait Function1),List(AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class immutable)),class List),List(TypeParamRef(A))), AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait Function1),List(AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class immutable)),class List),List(TypeParamRef(A))), TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int))))))))))),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any))))],EmptyTree))),TypeTree[RefinedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait PolyFunction),apply,PolyType(List(A), List(TypeBounds(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Nothing),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any))), MethodType(List(x$1), List(AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class immutable)),class List),List(TypeParamRef(A)))), RefinedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait PolyFunction),apply,PolyType(List(B), List(TypeBounds(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Nothing),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any))), MethodType(List(x$1), List(AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class immutable)),class List),List(TypeParamRef(B)))), AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait Function1),List(AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class immutable)),class List),List(TypeParamRef(A))), AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait Function1),List(AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class immutable)),class List),List(TypeParamRef(A))), TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any)))))))))))],Block(List(),Block(List(TypeDef($anon,Template(DefDef(<init>,List(List()),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)],EmptyTree),List(Apply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class Object)]),<init>),List()), TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait PolyFunction)]),ValDef(_,EmptyTree,EmptyTree),List(DefDef(apply,List(List(TypeDef(A,TypeBoundsTree(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Nothing)],TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any)],EmptyTree))), List(ValDef(x,AppliedTypeTree(Ident(List),List(Ident(A))),EmptyTree))),TypeTree[RefinedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait PolyFunction),apply,PolyType(List(B), List(TypeBounds(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Nothing),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any))), MethodType(List(y), List(AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class immutable)),class List),List(TypeParamRef(B)))), AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait Function1),List(AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class immutable)),class List),List(TypeRef(NoPrefix,type A))), AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait Function1),List(AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class immutable)),class List),List(TypeRef(NoPrefix,type A))), TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int))))))))],Block(List(),Block(List(TypeDef($anon,Template(DefDef(<init>,List(List()),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)],EmptyTree),List(Apply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class Object)]),<init>),List()), TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait PolyFunction)]),ValDef(_,EmptyTree,EmptyTree),List(DefDef(apply,List(List(TypeDef(B,TypeBoundsTree(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Nothing)],TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any)],EmptyTree))), List(ValDef(y,AppliedTypeTree(Ident(List),List(Ident(B))),EmptyTree))),TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait Function1),List(AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class immutable)),class List),List(TypeRef(NoPrefix,type A))), AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait Function1),List(AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class immutable)),class List),List(TypeRef(NoPrefix,type A))), TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int)))))],Block(List(),Block(List(DefDef($anonfun,List(List(ValDef(q,TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class immutable)),class List),List(TypeRef(NoPrefix,type A)))],EmptyTree))),TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait Function1),List(AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class immutable)),class List),List(TypeRef(NoPrefix,type A))), TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any)))],Block(List(),Block(List(DefDef($anonfun,List(List(ValDef(p,TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class immutable)),class List),List(TypeRef(NoPrefix,type A)))],EmptyTree))),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any)],Block(List(ValDef(z,TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int)],Literal(Constant(1)))),Apply(Select(Apply(Select(Apply(Select(Apply(Select(Select(Ident(x),size),+),List(Select(Ident(y),size))),+),List(Select(Ident(q),size))),+),List(Select(Ident(p),size))),+),List(Ident(z)))))),Closure(List(),Ident($anonfun),EmptyTree))))),Closure(List(),Ident($anonfun),EmptyTree)))))))),Typed(Apply(Select(New(Ident($anon)),<init>),List()),TypeTree[RefinedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait PolyFunction),apply,PolyType(List(B), List(TypeBounds(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Nothing),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any))), MethodType(List(y), List(AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class immutable)),class List),List(TypeParamRef(B)))), AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait Function1),List(AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class immutable)),class List),List(TypeRef(NoPrefix,type A))), AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait Function1),List(AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class immutable)),class List),List(TypeRef(NoPrefix,type A))), TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int))))))))])))))))),Typed(Apply(Select(New(Ident($anon)),<init>),List()),TypeTree[RefinedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait PolyFunction),apply,PolyType(List(A), List(TypeBounds(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Nothing),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any))), MethodType(List(x), List(AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class immutable)),class List),List(TypeParamRef(A)))), RefinedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait PolyFunction),apply,PolyType(List(B), List(TypeBounds(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Nothing),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any))), MethodType(List(y), List(AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class immutable)),class List),List(TypeParamRef(B)))), AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait Function1),List(AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class immutable)),class List),List(TypeParamRef(A))), AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait Function1),List(AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class immutable)),class List),List(TypeParamRef(A))), TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int)))))))))))]))))),Apply(Ident(println),List(Apply(Select(Apply(Select(Apply(TypeApply(Select(Apply(TypeApply(Select(Apply(Ident(foo),List(Ident(contImpl))),apply),List(TypeTree[TypeVar(TypeParamRef(A) -> TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any))])),List(Apply(TypeApply(Select(Ident(List),apply),List(TypeTree[TypeVar(TypeParamRef(A) -> TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int))])),List(Typed(SeqLiteral(List(Literal(Constant(1))),TypeTree[TypeVar(TypeParamRef(A) -> TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int))]),TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class <repeated>),List(TypeVar(TypeParamRef(A) -> TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int))))]))))),apply),List(TypeTree[TypeVar(TypeParamRef(B) -> TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class String))])),List(Apply(TypeApply(Select(Ident(List),apply),List(TypeTree[TypeVar(TypeParamRef(A) -> TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class String))])),List(Typed(SeqLiteral(List(Literal(Constant(A)), Literal(Constant(B))),TypeTree[TypeVar(TypeParamRef(A) -> TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class String))]),TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class <repeated>),List(TypeVar(TypeParamRef(A) -> TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class String))))]))))),apply),List(Apply(TypeApply(Select(Ident(List),apply),List(TypeTree[TypeVar(TypeParamRef(A) -> TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int))])),List(Typed(SeqLiteral(List(Literal(Constant(1)), Literal(Constant(1)), Literal(Constant(1))),TypeTree[TypeVar(TypeParamRef(A) -> TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int))]),TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class <repeated>),List(TypeVar(TypeParamRef(A) -> TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int))))]))))),apply),List(Apply(TypeApply(Select(Ident(List),apply),List(TypeTree[TypeVar(TypeParamRef(A) -> TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int))])),List(Typed(SeqLiteral(List(Literal(Constant(1)), Literal(Constant(1)), Literal(Constant(1)), Literal(Constant(1))),TypeTree[TypeVar(TypeParamRef(A) -> TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int))]),TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class <repeated>),List(TypeVar(TypeParamRef(A) -> TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int))))]))))))))))))))","package <empty> {\n  import continuations.*\n  final lazy module val compileFromString$package: \n    compileFromString$package\n   = new compileFromString$package()\n  @SourceFile(\"compileFromString.scala\") final module class \n    compileFromString$package\n  () extends Object() { this: compileFromString$package.type =>\n    private def writeReplace(): AnyRef = \n      new scala.runtime.ModuleSerializationProxy(classOf[compileFromString$package.type])\n    def program: Unit = \n      {\n        def foo(completion: continuations.Continuation[([A] => (List[A]) => [B] => (List[B]) => List[A] => List[A] => Int) | Any]): \n          [A] => (List[A]) => [B] => (List[B]) => List[A] => List[A] => Any\n         = \n          {\n            {\n              final class $anon() extends Object(), PolyFunction {\n                def apply[A >: Nothing <: Any](x: List[A]): [B] => (List[B]) => List[A] => List[A] => Int = \n                  {\n                    {\n                      final class $anon() extends Object(), PolyFunction {\n                        def apply[B >: Nothing <: Any](y: List[B]): List[A] => List[A] => Int = \n                          {\n                            {\n                              def $anonfun(q: List[A]): List[A] => Any = \n                                {\n                                  {\n                                    def $anonfun(p: List[A]): Any = \n                                      {\n                                        val z: Int = 1\n                                        x.size.+(y.size).+(q.size).+(p.size).+(z)\n                                      }\n                                    closure($anonfun)\n                                  }\n                                }\n                              closure($anonfun)\n                            }\n                          }\n                      }\n                      new $anon():([B] => (List[B]) => List[A] => List[A] => Int)\n                    }\n                  }\n              }\n              new $anon():([A] => (List[A]) => [B] => (List[B]) => List[A] => List[A] => Int)\n            }\n          }\n        println(\n          foo(continuations.jvm.internal.ContinuationStub.contImpl).apply[Any](List.apply[Int]([1 : Int]*)).apply[String](\n            List.apply[String]([\"A\",\"B\" : String]*)\n          ).apply(List.apply[Int]([1,1,1 : Int]*)).apply(List.apply[Int]([1,1,1,1 : Int]*))\n        )\n      }\n  }\n}"]