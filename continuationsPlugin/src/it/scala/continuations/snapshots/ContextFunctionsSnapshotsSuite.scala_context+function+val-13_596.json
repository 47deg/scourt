["PackageDef(Ident(<empty>),List(Import(Ident(continuations),List(ImportSelector(Ident(_),EmptyTree,EmptyTree))), ValDef(compileFromStringpackage,Ident(compileFromStringpackage$),Apply(Select(New(Ident(compileFromStringpackage$)),<init>),List())), TypeDef(compileFromStringpackage$,Template(DefDef(<init>,List(List()),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)],EmptyTree),List(Apply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class Object)]),<init>),List())),ValDef(_,SingletonTypeTree(Ident(compileFromStringpackage)),EmptyTree),List(DefDef(writeReplace,List(List()),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),type AnyRef)],Apply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class runtime)),class ModuleSerializationProxy)]),<init>),List(Literal(Constant(TermRef(ThisType(TypeRef(NoPrefix,module class <empty>)),object compileFromStringpackage)))))), DefDef(program,List(),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)],Block(List(DefDef(foo,List(List(ValDef(completion,TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),trait Continuation),List(OrType(AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait Function1),List(AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class immutable)),class List),List(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int))), TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int))),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any))))],EmptyTree))),TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait Function1),List(AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class immutable)),class List),List(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int))), TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any)))],Block(List(DefDef($anonfun,List(List(ValDef(l,TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class immutable)),class List),List(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int)))],EmptyTree))),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any)],Select(Ident(l),size))),Closure(List(),Ident($anonfun),EmptyTree)))),Apply(Ident(println),List(Apply(Select(Apply(Select(Ident(foo),apply),List(Apply(TypeApply(Select(Ident(List),apply),List(TypeTree[TypeVar(TypeParamRef(A) -> TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int))])),List(Typed(SeqLiteral(List(Literal(Constant(1)), Literal(Constant(2))),TypeTree[TypeVar(TypeParamRef(A) -> TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int))]),TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class <repeated>),List(TypeVar(TypeParamRef(A) -> TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int))))]))))),apply),List(Ident(given_Suspend))))))))))))","package <empty> {\n  import continuations.*\n  final lazy module val compileFromStringpackage: \n    compileFromStringpackage\n   = new compileFromStringpackage()\n  @SourceFile(\"compileFromStringscala\") final module class \n    compileFromStringpackage\n  () extends Object() { this: compileFromStringpackage.type =>\n    private def writeReplace(): AnyRef = \n      new scala.runtime.ModuleSerializationProxy(classOf[compileFromStringpackage.type])\n    def program: Unit = \n      {\n        def foo(completion: continuations.Continuation[(List[Int] => Int) | Any]): List[Int] => Any = \n          {\n            def $anonfun(l: List[Int]): Any = l.size\n            closure($anonfun)\n          }\n        println(foo.apply(List.apply[Int]([1,2 : Int]*)).apply(continuations.Suspend.given_Suspend))\n      }\n  }\n}"]