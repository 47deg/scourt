["PackageDef(Ident(examples),List(Import(Ident(continuations),List(ImportSelector(Ident(_),EmptyTree,EmptyTree))), ValDef(compileFromStringpackage,Ident(compileFromStringpackage$),Apply(Select(New(Ident(compileFromStringpackage$)),<init>),List())), TypeDef(compileFromStringpackage$,Template(DefDef(<init>,List(List()),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)],EmptyTree),List(Apply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class Object)]),<init>),List())),ValDef(_,SingletonTypeTree(Ident(compileFromStringpackage)),EmptyTree),List(DefDef(writeReplace,List(List()),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),type AnyRef)],Apply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class runtime)),class ModuleSerializationProxy)]),<init>),List(Literal(Constant(TermRef(ThisType(TypeRef(NoPrefix,module class examples)),object compileFromStringpackage)))))), DefDef(NonSuspendingContinuationCallsOtherContinuation,List(),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)],Block(List(DefDef(cont2,List(List(ValDef(x,TypeTree[TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int)],EmptyTree), ValDef(completion,TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),trait Continuation),List(OrType(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any))))],EmptyTree))),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any)],Apply(Select(Ident(x),+),List(Literal(Constant(1))))), DefDef(cont1,List(List(ValDef(x,TypeTree[TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int)],EmptyTree), ValDef(completion,TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),trait Continuation),List(OrType(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any))))],EmptyTree))),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any)],Apply(Apply(Ident(cont2),List(Apply(Select(Ident(x),+),List(Literal(Constant(2)))))),List(Ident(x$2))))),Apply(Ident(println),List(Apply(Apply(Ident(cont1),List(Literal(Constant(1)))),List(Ident(given_Suspend))))))))))))","package examples {\n  import continuations.*\n  final lazy module val compileFromStringpackage: \n    examples.compileFromStringpackage\n   = new examples.compileFromStringpackage()\n  @SourceFile(\"compileFromStringscala\") final module class \n    compileFromStringpackage\n  () extends Object() { this: examples.compileFromStringpackage.type =>\n    private def writeReplace(): AnyRef = \n      new scala.runtime.ModuleSerializationProxy(classOf[examples.compileFromStringpackage.type])\n    def NonSuspendingContinuationCallsOtherContinuation: Unit = \n      {\n        def cont2(x: Int, completion: continuations.Continuation[Int | Any]): Any = x.+(1)\n        def cont1(x: Int, completion: continuations.Continuation[Int | Any]): Any = cont2(x.+(2))(x$2)\n        println(cont1(1)(continuations.Suspend.given_Suspend))\n      }\n  }\n}"]