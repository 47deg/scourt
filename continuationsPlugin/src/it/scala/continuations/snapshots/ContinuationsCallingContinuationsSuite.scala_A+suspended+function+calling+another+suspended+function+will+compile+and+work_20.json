["PackageDef(Ident(examples),List(Import(Ident(continuations),List(ImportSelector(Ident(_),EmptyTree,EmptyTree))), ValDef(compileFromString$package,Ident(compileFromString$package$),Apply(Select(New(Ident(compileFromString$package$)),<init>),List())), TypeDef(compileFromString$package$,Template(DefDef(<init>,List(List()),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)],EmptyTree),List(Apply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class Object)]),<init>),List())),ValDef(_,SingletonTypeTree(Ident(compileFromString$package)),EmptyTree),List(DefDef(writeReplace,List(List()),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),type AnyRef)],Apply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class runtime)),class ModuleSerializationProxy)]),<init>),List(Literal(Constant(TermRef(ThisType(TypeRef(NoPrefix,module class examples)),object compileFromString$package)))))), DefDef(NonSuspendingContinuationCallsOtherContinuation,List(),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)],Block(List(DefDef(cont2,List(List(ValDef(x,TypeTree[TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int)],EmptyTree)), List(ValDef(completion,TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),trait Continuation),List(OrType(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any))))],EmptyTree))),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any)],Apply(Select(Ident(x),+),List(Literal(Constant(1))))), DefDef(cont1,List(List(ValDef(x,TypeTree[TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int)],EmptyTree)), List(ValDef(completion,TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),trait Continuation),List(OrType(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any))))],EmptyTree))),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any)],Apply(Apply(Ident(cont2),List(Apply(Select(Ident(x),+),List(Literal(Constant(2)))))),List(Ident(completion))))),Apply(Ident(println),List(Apply(Apply(Ident(cont1),List(Literal(Constant(1)))),List(Ident(contImpl))))))))))))","package examples {\n  import continuations.*\n  final lazy module val compileFromString$package: \n    examples.compileFromString$package\n   = new examples.compileFromString$package()\n  @SourceFile(\"compileFromString.scala\") final module class \n    compileFromString$package\n  () extends Object() { this: examples.compileFromString$package.type =>\n    private def writeReplace(): AnyRef = \n      new scala.runtime.ModuleSerializationProxy(classOf[examples.compileFromString$package.type])\n    def NonSuspendingContinuationCallsOtherContinuation: Unit = \n      {\n        def cont2(x: Int)(completion: continuations.Continuation[Int | Any]): Any = x.+(1)\n        def cont1(x: Int)(completion: continuations.Continuation[Int | Any]): Any = cont2(x.+(2))(completion)\n        println(cont1(1)(continuations.jvm.internal.ContinuationStub.contImpl))\n      }\n  }\n}"]