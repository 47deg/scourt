["PackageDef(Ident(<empty>),List(Import(Ident(continuations),List(ImportSelector(Ident(_),EmptyTree,EmptyTree))), ValDef(compileFromStringpackage,Ident(compileFromStringpackage$),Apply(Select(New(Ident(compileFromStringpackage$)),<init>),List())), TypeDef(compileFromStringpackage$,Template(DefDef(<init>,List(List()),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)],EmptyTree),List(Apply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class Object)]),<init>),List())),ValDef(_,SingletonTypeTree(Ident(compileFromStringpackage)),EmptyTree),List(DefDef(writeReplace,List(List()),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),type AnyRef)],Apply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class runtime)),class ModuleSerializationProxy)]),<init>),List(Literal(Constant(TermRef(ThisType(TypeRef(NoPrefix,module class <empty>)),object compileFromStringpackage)))))), DefDef(program,List(),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)],Block(List(DefDef(foo,List(List(ValDef(x$2,TypeTree[TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int)],EmptyTree), ValDef(completion,TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),trait Continuation),List(OrType(AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait ContextFunction1),List(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class scala)),object Predef),type String), AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait ContextFunction1),List(AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class immutable)),class List),List(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class scala)),object Predef),type String))), TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int))))),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any))))],EmptyTree))),TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait ContextFunction1),List(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class scala)),object Predef),type String), AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait ContextFunction1),List(AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class immutable)),class List),List(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class scala)),object Predef),type String))), TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any)))))],Block(List(DefDef($anonfun,List(List(ValDef(evidence$1,TypeTree[TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class scala)),object Predef),type String)],EmptyTree))),TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),trait ContextFunction1),List(AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class immutable)),class List),List(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class scala)),object Predef),type String))), TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any)))],Block(List(DefDef($anonfun,List(List(ValDef(evidence$2,TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class immutable)),class List),List(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class scala)),object Predef),type String)))],EmptyTree))),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any)],Apply(Select(Apply(Select(Inlined(Ident(Predef$),List(),Inlined(EmptyTree,List(),Ident(x$2))),+),List(Apply(Select(Inlined(Ident(Predef$),List(),Inlined(EmptyTree,List(),Ident(evidence$1))),length),List()))),+),List(Select(Inlined(Ident(Predef$),List(),Inlined(EmptyTree,List(),Ident(evidence$2))),size))))),Closure(List(),Ident($anonfun),EmptyTree)))),Closure(List(),Ident($anonfun),EmptyTree))), ValDef(given_Int,Ident(Int),Literal(Constant(3))), ValDef(given_String,Ident(String),Literal(Constant(AA))), ValDef(given_List_String,AppliedTypeTree(Ident(List),List(Ident(String))),Apply(TypeApply(Select(Ident(List),apply),List(TypeTree[TypeVar(TypeParamRef(A) -> TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class String))])),List(Typed(SeqLiteral(List(Literal(Constant(AA)), Literal(Constant(B))),TypeTree[TypeVar(TypeParamRef(A) -> TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class String))]),TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class <repeated>),List(TypeVar(TypeParamRef(A) -> TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class String))))]))))),Apply(Ident(println),List(Apply(Select(Apply(Select(Apply(Ident(foo),List(Ident(given_Suspend), Ident(given_Int))),apply),List(Ident(given_String))),apply),List(Ident(given_List_String))))))))))))","package <empty> {\n  import continuations.*\n  final lazy module val compileFromStringpackage: \n    compileFromStringpackage\n   = new compileFromStringpackage()\n  @SourceFile(\"compileFromStringscala\") final module class \n    compileFromStringpackage\n  () extends Object() { this: compileFromStringpackage.type =>\n    private def writeReplace(): AnyRef = \n      new scala.runtime.ModuleSerializationProxy(classOf[compileFromStringpackage.type])\n    def program: Unit = \n      {\n        @ContextResultCount(2) def foo(x$2: Int, completion: continuations.Continuation[((String) ?=> (List[String]) ?=> Int) | Any]): \n          (String) ?=> (List[String]) ?=> Any\n         = \n          {\n            def $anonfun(using evidence$1: String): (List[String]) ?=> Any = \n              {\n                def $anonfun(using evidence$2: List[String]): Any = x$2.+(evidence$1.length()).+(evidence$2.size)\n                closure($anonfun)\n              }\n            closure($anonfun)\n          }\n        final lazy given val given_Int: Int = 3\n        final lazy given val given_String: String = \"AA\"\n        final lazy given val given_List_String: List[String] = List.apply[String]([\"AA\",\"B\" : String]*)\n        println(foo(continuations.Suspend.given_Suspend, given_Int).apply(given_String).apply(given_List_String))\n      }\n  }\n}"]