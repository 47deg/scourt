["PackageDef(Ident(examples),List(Import(Ident(continuations),List(ImportSelector(Ident(_),EmptyTree,EmptyTree))), ValDef(compileFromString$package,Ident(compileFromString$package$),Apply(Select(New(Ident(compileFromString$package$)),<init>),List())), TypeDef(compileFromString$package$,Template(DefDef(<init>,List(List()),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)],EmptyTree),List(Apply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class Object)]),<init>),List())),ValDef(_,SingletonTypeTree(Ident(compileFromString$package)),EmptyTree),List(DefDef(writeReplace,List(List()),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),type AnyRef)],Apply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class runtime)),class ModuleSerializationProxy)]),<init>),List(Literal(Constant(TermRef(ThisType(TypeRef(NoPrefix,module class examples)),object compileFromString$package)))))), DefDef(NonSuspendingContinuationCallsOtherContinuation,List(),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)],Block(List(TypeDef(NonSuspendingContinuationCallsOtherContinuation$cont2$1,Template(DefDef(<init>,List(List(ValDef($completion,TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),trait Continuation),List(OrType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Null))))],EmptyTree))),TypeTree[TypeRef(NoPrefix,class NonSuspendingContinuationCallsOtherContinuation$cont2$1)],EmptyTree),List(Apply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class internal)),class ContinuationImpl)]),<init>),List(Ident($completion), Select(Ident($completion),context)))),ValDef(_,EmptyTree,EmptyTree),List(ValDef(I$0,TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any)],Ident(_)), ValDef(I$1,TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any)],Ident(_)), ValDef(I$2,TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any)],Ident(_)), DefDef(I$0_=,List(List(ValDef(x$0,TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any)],EmptyTree))),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)],Literal(Constant(()))), DefDef(I$1_=,List(List(ValDef(x$0,TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any)],EmptyTree))),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)],Literal(Constant(()))), DefDef(I$2_=,List(List(ValDef(x$0,TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any)],EmptyTree))),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)],Literal(Constant(()))), ValDef($result,TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class util)),class Either),List(TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class Throwable), OrType(OrType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Null)),TermRef(ThisType(TypeRef(ThisType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),module class Continuation$)),module class State$)),val Suspended))))],Ident(_)), ValDef($label,TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int)],Ident(_)), DefDef($result_=,List(List(ValDef(x$0,TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class util)),class Either),List(TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class Throwable), OrType(OrType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Null)),TermRef(ThisType(TypeRef(ThisType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),module class Continuation$)),module class State$)),val Suspended))))],EmptyTree))),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)],Literal(Constant(()))), DefDef($label_=,List(List(ValDef(x$0,TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Int)],EmptyTree))),TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)],Literal(Constant(()))), DefDef(invokeSuspend,List(List(ValDef(result,TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class util)),class Either),List(TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class Throwable), OrType(OrType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Null)),TermRef(ThisType(TypeRef(ThisType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),module class Continuation$)),module class State$)),val Suspended))))],EmptyTree))),TypeTree[OrType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Null))],Block(List(Assign(Select(This(Ident(NonSuspendingContinuationCallsOtherContinuation$cont2$1)),$result),Ident(result)), Assign(Select(This(Ident(NonSuspendingContinuationCallsOtherContinuation$cont2$1)),$label),Apply(Select(Select(This(Ident(NonSuspendingContinuationCallsOtherContinuation$cont2$1)),$label),|),List(Ident(MinValue))))),Apply(Ident(cont2),List(Literal(Constant(null)), This(Ident(NonSuspendingContinuationCallsOtherContinuation$cont2$1)))))), DefDef(create,List(List(ValDef(value,TypeTree[OrType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Null))],EmptyTree), ValDef(completion,TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),trait Continuation),List(OrType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Null))))],EmptyTree))),TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),trait Continuation),List(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)))],Apply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class internal)),class BaseContinuationImpl)]),<init>),List(Ident(completion)))), DefDef(invoke,List(List(ValDef(p1,TypeTree[OrType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Null))],EmptyTree), ValDef(p2,TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),trait Continuation),List(OrType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Null))))],EmptyTree))),TypeTree[OrType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Null))],Apply(Select(TypeApply(Select(Apply(Select(This(Ident(NonSuspendingContinuationCallsOtherContinuation$cont2$1)),create),List(Ident(p1), Ident(p2))),asInstanceOf),List(TypeTree[ThisType(TypeRef(ThisType(TypeRef(NoPrefix,module class internal)),class BaseContinuationImpl))])),invokeSuspend),List(Apply(TypeApply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class util)),class Right)]),<init>),List(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)], TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Unit)])),List(Literal(Constant(())))))))))), DefDef(cont2,List(List(ValDef(x,TypeTree[TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int)],EmptyTree), ValDef(completion,TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),trait Continuation),List(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int)))],EmptyTree))),TypeTree[OrType(OrType(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Null)),TermRef(ThisType(TypeRef(ThisType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),module class Continuation$)),module class State$)),val Suspended))],Block(List(ValDef(x##1,TypeTree[TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int)],Ident(x)), ValDef(y,TypeTree[TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int)],Literal(Constant(null))), ValDef(z,TypeTree[TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int)],Literal(Constant(null))), Block(List(ValDef($continuation,TypeTree[TypeRef(NoPrefix,class NonSuspendingContinuationCallsOtherContinuation$cont2$1)],Match(Ident(completion),List(CaseDef(Bind(x$0,Typed(Ident(x$0),TypeTree[TypeRef(NoPrefix,class NonSuspendingContinuationCallsOtherContinuation$cont2$1)])),Apply(Select(Apply(Select(Select(Ident(x$0),$label),&),List(Ident(MinValue))),!=),List(Literal(Constant(0)))),Block(List(Assign(Select(Ident(x$0),$label),Apply(Select(Select(Ident(x$0),$label),-),List(Ident(MinValue))))),Ident(x$0))), CaseDef(Ident(_),EmptyTree,Apply(Select(New(TypeTree[TypeRef(NoPrefix,class NonSuspendingContinuationCallsOtherContinuation$cont2$1)]),<init>),List(Ident(completion))))))), ValDef($result,TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class util)),class Either),List(TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class Throwable), OrType(OrType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Null)),TermRef(ThisType(TypeRef(ThisType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),module class Continuation$)),module class State$)),val Suspended))))],Select(Ident($continuation),$result))),Match(Select(Ident($continuation),$label),List(CaseDef(Literal(Constant(0)),EmptyTree,Block(List(Apply(Select(Ident(Continuation),checkResult),List(Ident($result))), Assign(Select(Ident($continuation),I$0),Ident(x##1)), Assign(Select(Ident($continuation),$label),Literal(Constant(1))), ValDef(safeContinuation,TypeTree[AppliedType(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object continuations),class SafeContinuation),List(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int)))],Apply(TypeApply(Select(Ident(SafeContinuation),init),List(TypeTree[TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int)])),List(Ident($continuation)))), Block(List(),Apply(Select(Ident(safeContinuation),resume),List(Apply(Select(Ident(x##1),+),List(Literal(Constant(1)))))))),Match(Apply(Select(Ident(safeContinuation),getOrThrow),List()),List(CaseDef(Select(Select(Ident(Continuation),State),Suspended),EmptyTree,Return(Select(Select(Ident(Continuation),State),Suspended),Ident(cont2))), CaseDef(Bind(orThrow,EmptyTree),EmptyTree,Block(List(Assign(Ident(y),TypeApply(Select(Ident(orThrow),asInstanceOf),List(TypeTree[TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int)])))),Return(Literal(Constant(())),Ident(label1)))))))), CaseDef(Literal(Constant(1)),EmptyTree,Block(List(Assign(Ident(x##1),Select(Ident($continuation),I$0)), Apply(Select(Ident(Continuation),checkResult),List(Ident($result))), Assign(Ident(y),TypeApply(Select(Ident($result),asInstanceOf),List(TypeTree[TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int)]))), Labeled(Bind(label1,EmptyTree),EmptyTree), Assign(Select(Ident($continuation),I$0),Ident(x##1)), Assign(Select(Ident($continuation),I$1),Ident(y)), Assign(Select(Ident($continuation),$label),Literal(Constant(2))), ValDef(safeContinuation,TypeTree[AppliedType(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object continuations),class SafeContinuation),List(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int)))],Apply(TypeApply(Select(Ident(SafeContinuation),init),List(TypeTree[TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int)])),List(Ident($continuation)))), Block(List(),Apply(Select(Ident(safeContinuation),resume),List(Apply(Select(Ident(y),+),List(Literal(Constant(1)))))))),Match(Apply(Select(Ident(safeContinuation),getOrThrow),List()),List(CaseDef(Select(Select(Ident(Continuation),State),Suspended),EmptyTree,Return(Select(Select(Ident(Continuation),State),Suspended),Ident(cont2))), CaseDef(Bind(orThrow,EmptyTree),EmptyTree,Assign(Ident(z),TypeApply(Select(Ident(orThrow),asInstanceOf),List(TypeTree[TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int)])))))))), CaseDef(Literal(Constant(2)),EmptyTree,Block(List(Assign(Ident(x##1),Select(Ident($continuation),I$0)), Assign(Ident(y),Select(Ident($continuation),I$1)), Apply(Select(Ident(Continuation),checkResult),List(Ident($result)))),Assign(Ident(z),TypeApply(Select(Ident($result),asInstanceOf),List(TypeTree[TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int)]))))), CaseDef(Ident(_),EmptyTree,Apply(Ident(throw),List(Apply(Select(New(TypeTree[TypeRef(ThisType(TypeRef(NoPrefix,module class lang)),class IllegalArgumentException)]),<init>),List(Literal(Constant(call to 'resume' before 'invoke' with coroutine))))))))))),Apply(Select(Ident(y),+),List(Ident(z))))), DefDef(cont1,List(List(ValDef(x,TypeTree[TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int)],EmptyTree), ValDef(completion,TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),trait Continuation),List(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int)))],EmptyTree))),TypeTree[OrType(OrType(TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Any),TypeRef(ThisType(TypeRef(NoPrefix,module class scala)),class Null)),TermRef(ThisType(TypeRef(ThisType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),module class Continuation$)),module class State$)),val Suspended))],Block(List(ValDef(continuation1,TypeTree[AppliedType(TypeRef(ThisType(TypeRef(NoPrefix,module class continuations)),trait Continuation),List(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int)))],Ident(completion)), ValDef(safeContinuation,TypeTree[AppliedType(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object continuations),class SafeContinuation),List(TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int)))],Apply(TypeApply(Select(Ident(SafeContinuation),init),List(TypeTree[TypeRef(TermRef(ThisType(TypeRef(NoPrefix,module class <root>)),object scala),class Int)])),List(Ident(continuation1)))), Block(List(),Apply(Select(Ident(safeContinuation),resume),List(Apply(Ident(cont2),List(Apply(Select(Ident(x),+),List(Literal(Constant(2)))), Ident(contImpl))))))),Apply(Select(Ident(safeContinuation),getOrThrow),List())))),Apply(Ident(println),List(Apply(Ident(cont1),List(Literal(Constant(1)), Ident(contImpl))))))))))))","package examples {\n  import continuations.*\n  final lazy module val compileFromString$package: \n    examples.compileFromString$package\n   = new examples.compileFromString$package()\n  @SourceFile(\"compileFromString.scala\") final module class \n    compileFromString$package\n  () extends Object() { this: examples.compileFromString$package.type =>\n    private def writeReplace(): AnyRef = \n      new scala.runtime.ModuleSerializationProxy(classOf[examples.compileFromString$package.type])\n    def NonSuspendingContinuationCallsOtherContinuation: Unit = \n      {\n        class NonSuspendingContinuationCallsOtherContinuation$cont2$1($completion: continuations.Continuation[Any | Null]) extends \n          continuations.jvm.internal.ContinuationImpl\n        ($completion, $completion.context) {\n          var I$0: Any = _\n          var I$1: Any = _\n          var I$2: Any = _\n          def I$0_=(x$0: Any): Unit = ()\n          def I$1_=(x$0: Any): Unit = ()\n          def I$2_=(x$0: Any): Unit = ()\n          var $result: Either[Throwable, Any | Null | continuations.Continuation.State.Suspended.type] = _\n          var $label: Int = _\n          def $result_=(x$0: Either[Throwable, Any | Null | (continuations.Continuation.State.Suspended : continuations.Continuation.State)]): Unit\n             = \n          ()\n          def $label_=(x$0: Int): Unit = ()\n          protected override def invokeSuspend(\n            result: Either[Throwable, Any | Null | (continuations.Continuation.State.Suspended : continuations.Continuation.State)]\n          ): Any | Null = \n            {\n              this.$result = result\n              this.$label = this.$label.|(scala.Int.MinValue)\n              cont2(null, this)\n            }\n          override def create(value: Any | Null, completion: continuations.Continuation[Any | Null]): continuations.Continuation[Unit] = \n            new continuations.jvm.internal.BaseContinuationImpl(completion)\n          protected def invoke(p1: Any | Null, p2: continuations.Continuation[Any | Null]): Any | Null = \n            this.create(p1, p2).asInstanceOf[(BaseContinuationImpl.this : continuations.jvm.internal.BaseContinuationImpl)].invokeSuspend(\n              new Right[Unit, Unit](())\n            )\n        }\n        def cont2(x: Int, completion: continuations.Continuation[Int]): \n          Int | Null | (continuations.Continuation.State.Suspended : continuations.Continuation.State)\n         = \n          {\n            var x##1: Int = x\n            var y: Int = null\n            var z: Int = null\n            {\n              val $continuation: NonSuspendingContinuationCallsOtherContinuation$cont2$1 = \n                completion match \n                  {\n                    case x$0 @ x$0:NonSuspendingContinuationCallsOtherContinuation$cont2$1 if x$0.$label.&(scala.Int.MinValue).!=(0) => \n                      x$0.$label = x$0.$label.-(scala.Int.MinValue)\n                      x$0\n                    case _ => new NonSuspendingContinuationCallsOtherContinuation$cont2$1(completion)\n                  }\n              val $result: Either[Throwable, Any | Null | (continuations.Continuation.State.Suspended : continuations.Continuation.State)] = \n                $continuation.$result\n              $continuation.$label match \n                {\n                  case 0 => \n                    continuations.Continuation.checkResult($result)\n                    $continuation.I$0 = x##1\n                    $continuation.$label = 1\n                    val safeContinuation: continuations.SafeContinuation[Int] = continuations.SafeContinuation.init[Int]($continuation)\n                    {\n                      safeContinuation.resume(x##1.+(1))\n                    }\n                    safeContinuation.getOrThrow() match \n                      {\n                        case continuations.Continuation.State.Suspended => return continuations.Continuation.State.Suspended\n                        case orThrow @ <empty> => \n                          y = orThrow.asInstanceOf[Int]\n                          return[label1] ()\n                      }\n                  case 1 => \n                    x##1 = $continuation.I$0\n                    continuations.Continuation.checkResult($result)\n                    y = $result.asInstanceOf[Int]\n                    label1[Unit]: <empty>\n                    $continuation.I$0 = x##1\n                    $continuation.I$1 = y\n                    $continuation.$label = 2\n                    val safeContinuation: continuations.SafeContinuation[Int] = continuations.SafeContinuation.init[Int]($continuation)\n                    {\n                      safeContinuation.resume(y.+(1))\n                    }\n                    safeContinuation.getOrThrow() match \n                      {\n                        case continuations.Continuation.State.Suspended => return continuations.Continuation.State.Suspended\n                        case orThrow @ <empty> => z = orThrow.asInstanceOf[Int]\n                      }\n                  case 2 => \n                    x##1 = $continuation.I$0\n                    y = $continuation.I$1\n                    continuations.Continuation.checkResult($result)\n                    z = $result.asInstanceOf[Int]\n                  case _ => throw new IllegalArgumentException(\"call to \\'resume\\' before \\'invoke\\' with coroutine\")\n                }\n            }\n            y.+(z)\n          }\n        def cont1(x: Int, completion: continuations.Continuation[Int]): \n          Any | Null | (continuations.Continuation.State.Suspended : continuations.Continuation.State)\n         = \n          {\n            val continuation1: continuations.Continuation[Int] = completion\n            val safeContinuation: continuations.SafeContinuation[Int] = continuations.SafeContinuation.init[Int](continuation1)\n            {\n              safeContinuation.resume(cont2(x.+(2), continuations.jvm.internal.ContinuationStub.contImpl))\n            }\n            safeContinuation.getOrThrow()\n          }\n        println(cont1(1, continuations.jvm.internal.ContinuationStub.contImpl))\n      }\n  }\n}"]